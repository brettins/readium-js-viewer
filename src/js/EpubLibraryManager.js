define(['jquery', './ModuleConfig', './PackageParser', './workers/WorkerProxy', 'StorageManager', 'i18nStrings', 'URIjs', './EpubLibraryOPDS'], function ($, moduleConfig, PackageParser, WorkerProxy, StorageManager, Strings, URI, EpubLibraryOPDS) {

    var LibraryManager = function(){
    };

    //TODO - move this to the ekitabu version
    var bookCategories = [ 
                            "Standard 1", 
                            "Standard 2", 
                            "Standard 3", 
                            "Standard 4", 
                            "Standard 5", 
                            "Standard 6", 
                            "CRE", 
                            "English", 
                            "Kiswahili", 
                            "Mathematics", 
                            "Science", 
                            "Social Studies"
                         ];

    var adjustEpubLibraryPath = function(path) {

        if (!path || !moduleConfig.epubLibraryPath) return path;

        var pathUri = undefined;
        try {
            pathUri = new URI(path);
        } catch(err) {
            console.error(err);
            console.log(path);
        }
        
        if (pathUri && pathUri.is("absolute")) return path; // "http://", "https://", "data:", etc.

        if (path.indexOf("epub_content/") == 0) {
            path = path.replace("epub_content/", "");
        }

        var parts = moduleConfig.epubLibraryPath.split('/');
        parts.pop();

        var root = parts.join('/');
        path = root + (path.charAt(0) == '/' ? '' : '/') + path;

        return path;
    };

    LibraryManager.prototype = {

       _getFullUrl : function(packageUrl, relativeUrl){
            if (!relativeUrl){
                return null;
            }

            var parts = packageUrl.split('/');
            parts.pop();

            var root = parts.join('/');

            return root + (relativeUrl.charAt(0) == '/' ? '' : '/') + relativeUrl
        },

        // TODO: see disabled usage in EpubLibrary.js
        // resetLibraryData: function() {
        //     this.libraryData = undefined;
        // },

        retrieveAvailableEpubs : function(success, error){

            //library data already loaded
            if (this.libraryData){
                success(this.libraryData);
                return;
            }

            var self = this;
        
            var indexUrl = moduleConfig.epubLibraryPath
                        ? StorageManager.getPathUrl(moduleConfig.epubLibraryPath)
                        : StorageManager.getPathUrl('/epub_library.json');

            var dataFail = function() {
                console.error("Ebook library fail: " + indexUrl);
                
                self.libraryData = [];
                success([]);
            };


            /**
             *  Gets any categories an epub has been tagged with. Eg, "horror", "grade 1", "math", "fantasy"
             *  @param {jQuery object}  categoriesXml           XML collection of books with their categories 
             *  @param {string}         epubRootDirAsUniqueId   CHROME ONLY - ID generated and set as rood dir
             */
            function getEpubCategoriesFromXml(xmlData,epubRootDirAsUniqueId) {
                    //get category XML data as traversable/parsed jQuery object
                    xmlDoc = $.parseXML(xmlData);
                    categoriesXml = $(xmlDoc);

                    //get all category nodes for this id
                    var categoriesObjects = categoriesXml.find("rootDirAsId:contains("+epubRootDirAsUniqueId+")").parent().find("category");
                    categories = [];

                    //iterate over all categories and store them in the array
                    categoriesObjects.each(function(){ 
                        categories.push($(this).text());
                    });
                    return categories;
            }//function getEpubCategoriesFromXml(categoriesXml,epubRootDirAsUniqueId) {
            
            
            
            
            
            
            
            //called when epub metadata is loaded successfully
            var dataSuccess = function(data) {
                console.log("Ebook library success: " + indexUrl);
                
                //load book categories then combine with epub data from library file
                //TODO - handle the case where categories.xml doesn't exist
                jQuery.get(StorageManager.getPathUrl("/categories.xml"), function(xmlData) {

                    //add categories to each epub
                    for (var i = 0; i < data.length; i++) {

                            //we are using the epub "rootDir" as a unique ID - these are generated by chrome
                            //TODO - handle non chrome version of this 
                            var epubRootDirAsUniqueId = data[i].rootDir;
                            var categories = getEpubCategoriesFromXml(xmlData,epubRootDirAsUniqueId);
                            data[i].categories = categories;
                    }

                    if (moduleConfig.epubLibraryPath) {
                        for (var i = 0; i < data.length; i++) {
                            data[i].coverHref = adjustEpubLibraryPath(data[i].coverHref);
                            data[i].rootUrl = adjustEpubLibraryPath(data[i].rootUrl);
                        }
                    }
                    self.libraryData = data;
                    success(data);
                });
                
            };


            /*************
            /**  Temporary code for generating categories.xml for testing purposes
            /************/

            /*
            var xmlFilename = "/categories.xml";
            var xmlTestSuccess;
            var xmlTestError;
            StorageManager.saveFile(xmlFilename, "<books> \
    <book> \
        <rootDirAsId>1467945021952771</rootDirAsId> \
        <category>adventure</category> \
        <category>classics</category> \
    </book> \
    <book> \
        <rootDirAsId>1467929934370328</rootDirAsId> \
        <category>horror</category> \
        <category>classics</category> \
    </book> \
            </books>", xmlTestSuccess, xmlTestError);
            
            **/


            //************************
            //Load epub data from URL
            //***********************

            //Get epub data from JSON file if it exists
            if (/\.json$/.test(indexUrl)) {
                $.getJSON(indexUrl, function(data){
                    dataSuccess(data);
                }).fail(function(){
                    dataFail();
                });
            } 
            //else get data from OPDS file - cloud reader uses this
            else {
                EpubLibraryOPDS.tryParse(indexUrl, dataSuccess, dataFail);
            }
        },

        deleteEpubWithId : function(id, success, error){
            WorkerProxy.deleteEpub(id, this.libraryData, {
                success: this._refreshLibraryFromWorker.bind(this, success),
                error: error
            });
        },
        retrieveFullEpubDetails : function(packageUrl, rootUrl, rootDir, noCoverBackground, success, error){
            var self = this;

            $.get(packageUrl, function(data){
    
                if(typeof(data) === "string" ) {
                    var parser = new window.DOMParser;
                    data = parser.parseFromString(data, 'text/xml');
                }
                var jsonObj = PackageParser.parsePackageDom(data, packageUrl);
                jsonObj.coverHref = jsonObj.coverHref ? self._getFullUrl(packageUrl, jsonObj.coverHref) : undefined;
                jsonObj.packageUrl = packageUrl;
                jsonObj.rootDir = rootDir;
                jsonObj.rootUrl = rootUrl;
                jsonObj.noCoverBackground = noCoverBackground;
    
                success(jsonObj);

            }).fail(error);
        },
        _refreshLibraryFromWorker : function(callback, newLibraryData){
            this.libraryData = newLibraryData;
            callback();
        },
        handleZippedEpub : function(options){
            WorkerProxy.importZip(options.file, this.libraryData, {
                progress : options.progress,
                overwrite: options.overwrite,
                success: this._refreshLibraryFromWorker.bind(this, options.success),
                error : options.error
            });
            //Dialogs.showModalProgress()
            //unzipper.extractAll();
        },
        handleDirectoryImport : function(options){

            var rawFiles = options.files,
                files = {};
            for (var i = 0; i < rawFiles.length; i++){
                 var path = rawFiles[i].webkitRelativePath
                // don't capture paths that contain . at the beginning of a file or dir.
                // These are hidden files. I don't think chrome will ever reference
                // a file using double dot "/.." so this should be safe
                if (path.indexOf('/.') != -1){
                    continue;
                }
                var parts = path.split('/');

                parts.shift();
                var shiftPath = parts.join('/');

                files[shiftPath] = rawFiles[i];
            }

            WorkerProxy.importDirectory(files, this.libraryData, {
                progress : options.progress,
                overwrite: options.overwrite,
                success: this._refreshLibraryFromWorker.bind(this, options.success),
                error : options.error
            });
        },
        handleUrlImport : function(options){
            WorkerProxy.importUrl(options.url, this.libraryData, {
                progress : options.progress,
                overwrite: options.overwrite,
                success: this._refreshLibraryFromWorker.bind(this, options.success),
                error : options.error

            });
        },
        handleMigration : function(options){
            WorkerProxy.migrateOldBooks({
                progress : options.progress,
                success: this._refreshLibraryFromWorker.bind(this, options.success),
                error : options.error
            });
        },
        handleUrl : function(options){

        },
        canHandleUrl : function(){
            return moduleConfig.canHandleUrl;
        },
        canHandleDirectory : function(){
            return moduleConfig.canHandleDirectory;
        }
    }

    window.cleanEntireLibrary = function(){
        StorageManager.deleteFile('/', function(){
            console.log('done');
        }, console.error);
    }
    return new LibraryManager();

});
